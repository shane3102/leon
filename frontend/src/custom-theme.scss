// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@import '@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$frontend-good-ux-primary: mat.define-palette(mat.$blue-palette);
$frontend-good-ux-accent: mat.define-palette(mat.$green-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$frontend-good-ux-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$frontend-good-ux-theme: mat.define-light-theme((color: (primary: $frontend-good-ux-primary,
        accent: $frontend-good-ux-accent,
        warn: $frontend-good-ux-warn,
      )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($frontend-good-ux-theme);

$frontend-bad-ux-primary: mat.define-palette(mat.$gray-palette);
$frontend-bad-ux-accent: mat.define-palette(mat.$blue-gray-palette, A200, A100, A400);

$frontend-bad-ux-warn: mat.define-palette(mat.$gray-palette);

$frontend-bad-ux-theme: mat.define-light-theme((color: (primary: $frontend-bad-ux-primary,
        accent: $frontend-bad-ux-accent,
        warn: $frontend-bad-ux-warn,
      )));

.bad-ux {
  @include angular-material-color($frontend-bad-ux-theme);
}